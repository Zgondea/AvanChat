version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: chat_legislativ_db
    environment:
      POSTGRES_DB: chat_legislativ
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: chat_legislativ_redis
    ports:
      - "6379:6379"
    networks:
      - app_network

  # Ollama for local AI model
  ollama:
    image: ollama/ollama:latest
    container_name: chat_legislativ_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - app_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat_legislativ_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/chat_legislativ
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_URL=http://ollama:11434
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - ollama
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
    networks:
      - app_network
    restart: unless-stopped

  # Frontend Admin Panel
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat_legislativ_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost/api/v1
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app_network
    restart: unless-stopped

  # Nginx for reverse proxy and serving widget
  nginx:
    image: nginx:alpine
    container_name: chat_legislativ_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/usr/share/nginx/html
      - ./widget:/usr/share/nginx/html/widget
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:
  ollama_data:
  uploads_data:

networks:
  app_network:
    driver: bridge